import { AnyTuple, Api, Codec, StorageKey } from '@autonomys/auto-utils';
export declare const rpc: <T>(api: Api, methodPath: string, params?: any[]) => Promise<T>;
export declare const query: <T>(api: Api, methodPath: string, params?: any[]) => Promise<T>;
export declare const block: <RawBlock>(api: Api) => Promise<RawBlock>;
export declare const blockNumber: (api: Api) => Promise<number>;
export declare const blockHash: (api: Api) => Promise<string>;
export declare const networkTimestamp: (api: Api) => Promise<Codec>;
export declare const solutionRanges: (api: Api) => Promise<{
    current: bigint | null;
    next: bigint | null;
    votingCurrent: bigint | null;
    votingNext: bigint | null;
}>;
export declare const shouldAdjustSolutionRange: (api: Api) => Promise<boolean>;
export declare const segmentCommitment: (api: Api) => Promise<[StorageKey<AnyTuple>, Codec][]>;
export declare const slotProbability: (api: Api) => [number, number];
export declare const maxPiecesInSector: (api: Api) => bigint;
export declare function solutionRangeToPieces(solutionRange: bigint, slotProbability: [bigint, bigint]): bigint;
export declare const spacePledge: (api: Api) => Promise<bigint>;
export declare const blockchainSize: (api: Api) => Promise<bigint>;
//# sourceMappingURL=info.d.ts.map